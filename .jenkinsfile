pipeline {
    agent {
        docker { image 'megatex' }
    }
    environment {
        FH_API_KEY = credentials('filehost-api-key')
        FH_ID_UG_COMPLBOOK = 'd668168c-1fef-4560-a530-77e9e237536d'
        FH_ID_UG_BASICREF = '42d0f1f9-610a-45f9-bad1-9502f0e6eb7d'
        FH_ID_UG_CHIPSET = '5d042029-d3c9-4dcb-9ba3-6690505418de'
        FH_ID_UG_DEVGUIDE = 'ffd575e5-5d9c-47ff-b553-fcec80fd77a3'
        FH_ID_UG_USERGUIDE = 'a5081244-a976-4a21-9153-27cca13fd613'
    }
    stages {
        stage('Cleanup') {
            steps {
                sh 'make realclean'
            }
        }
        stage('Build MEGA65 Book') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh "make REPOPATH=. mega65-book.pdf"
                }
            }
            post {
                failure {
                    sh "rm -f mega65-book.pdf"
                }
            }
        }
        stage('Build MEGA65 BASIC65 Reference') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh "make REPOPATH=. mega65-basic65-reference.pdf"
                }
            }
            post {
                failure {
                    sh "rm -f mega65-basic65-reference.pdf"
                }
            }
        }
        stage('Build MEGA65 Chipset Reference') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh "make REPOPATH=. mega65-chipset-reference.pdf"
                }
            }
            post {
                failure {
                    sh "rm -f mega65-chipset-reference.pdf"
                }
            }
        }
        stage('Build MEGA65 Developer Guide') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh "make REPOPATH=. mega65-developer-guide.pdf"
                }
            }
            post {
                failure {
                    sh "rm -f mega65-developer-guide.pdf"
                }
            }
        }
        stage('Build MEGA65 Userguide') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh "make REPOPATH=. mega65-userguide.pdf"
                }
            }
            post {
                failure {
                    sh "rm -f mega65-userguide.pdf"
                }
            }
        }
        stage('Set build result') {
            steps {
                script {
                    def files = findFiles(glob: 'mega65-*.pdf')
                    // if we did not build any PDF successfully, we need to set the build result
                    if (files.length == 0) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: "mega65-*.pdf*",
                fingerprint: true
        }
        success {
            script {
                sh '''
                filehost-upload -i ${FH_ID_UG_COMPLBOOK} -a replaceall -V 1.0 -I "latest build" mega65-book.pdf
                filehost-upload -i ${FH_ID_UG_BASICREF} -a replaceall -V 1.0 -I "latest build" mega65-basic65-reference.pdf
                filehost-upload -i ${FH_ID_UG_CHIPSET} -a replaceall -V 1.0 -I "latest build" mega65-chipset-reference.pdf
                filehost-upload -i ${FH_ID_UG_DEVGUIDE} -a replaceall -V 1.0 -I "latest build" mega65-developer-guide.pdf
                filehost-upload -i ${FH_ID_UG_USERGUIDE} -a replaceall -V 1.0 -I "latest build" mega65-userguide.pdf
                '''
            }
        }
    }
}
